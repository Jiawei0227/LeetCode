package com.interview.dropbox;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Created by Jerry Wang on 21/09/2018.
 */
public class MalwareDefender {

    public List<Integer> solution(List<List<Integer>> matrix, List<Integer> infectedMachines){
        //define union
        int[] union = new int[matrix.size()];
        for(int i = 0; i<union.length ;i++)
            union[i] = i;

        for(int i = 0; i<union.length ;i++){
            for(int j = 0;i<matrix.get(i).size();j++){
                if(union[i] == union[j])
                    continue;
                else
                    union[j] = union[i];
            }
        }
        HashMap<Integer,List<Integer>> unionMap = new HashMap<>();
        for(int i = 0; i<union.length ;i++ ){
            if(unionMap.containsKey(union[i])){
                List<Integer> re = unionMap.get(union[i]);
                re.add(i);
            }else{
                List<Integer> re = new ArrayList<>();
                re.add(i);
                unionMap.put(union[i],re);
            }
        }

        int max = 0;
        int maxIndex = 0;

        for(List<Integer> unionList : unionMap.values()){
            int infectNumber = 0;
            int index = 0;
            for(int i : infectedMachines){
                if(unionList.contains(i)) {
                    infectNumber++;
                    index = i;
                }
            }
            if(infectNumber==1) {
                if (max < unionList.size()) {
                    maxIndex = index;
                    max = unionList.size();
                }
            }
        }
        List<Integer> re = new ArrayList<>();
        re.add(maxIndex);
        re.add(max);

        return re;


    }

/**
 * int[] union = new int[network.size()];
 for(int i = 0; i<union.length; i++)
 union[i] = i + union.length;
 for(int i = 0; i<union.length; i++){
 for(int j = i; j<network.get(i).size();j++){
 if(j == i && network.get(i).get(j) == 1 && union[i] >= union.length){
 union[i] -= union.length;
 union[j] = union[i];
 }

 if(network.get(i).get(j) == 1){
 union[j] = union[i];
 }
 }
 }
 for(int i = 0; i<union.length; i++)
 System.out.println(union[i]);

 HashMap<Integer,List<Integer>> unionHash = new HashMap<>();
 for(int i = 0; i<union.length ; i++){
 if(unionHash.containsKey(union[i])){
 List<Integer> unionVal = unionHash.get(union[i]);
 unionVal.add(i);
 }else{
 List<Integer> unionVal = new ArrayList<>();
 unionVal.add(i);
 unionHash.put(union[i],unionVal);
 }
 }

 int max = 0;
 int maxIndex = 0;
 for(Integer key : unionHash.keySet()){
 if(key >= union.length)
 continue;
 List<Integer> unionValue = unionHash.get(key);
 // for(int i = 0; i<unionValue.size();i++)
 //     System.out.print(unionValue.get(i));
 // System.out.println();
 int infectNumber = 0;
 int index = 0;
 for(int i = 0;i<initial_machines.size(); i++){
 if(unionValue.contains(initial_machines.get(i))){
 infectNumber ++;
 index = initial_machines.get(i);
 }
 }
 if(infectNumber == 1){
 if(max < unionValue.size()){
 max = unionValue.size();
 maxIndex = index;
 }
 }
 }
 List<Integer> re = new ArrayList<Integer>();
 re.add(maxIndex);
 re.add(max);
 return re;
 */

}
